package com.quicklocal.service;

import com.quicklocal.dto.OrderDto;
import com.quicklocal.exception.ServiceServiceException;
import com.quicklocal.model.Order;
import com.quicklocal.model.Service;
import com.quicklocal.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;

import java.util.List;
import java.util.Optional;

@org.springframework.stereotype.Service
public class OrderService {

    private final OrderRepository orderRepository;
    private final ServiceService serviceService;
    private final JavaMailSender emailSender;

    @Autowired
    public OrderService(OrderRepository orderRepository, ServiceService serviceService, JavaMailSender emailSender) {
        this.orderRepository = orderRepository;
        this.serviceService = serviceService;
        this.emailSender = emailSender;
    }

    public Order placeOrder(OrderDto orderDto, Integer serviceProviderId) throws ServiceServiceException {
        Service serviceProvider = serviceService.findById(serviceProviderId);
        if (serviceProvider != null) {
            Order orderEntity = new Order();
            orderEntity.setName(orderDto.getName());
            orderEntity.setPhone(orderDto.getPhone());
            orderEntity.setAddress(orderDto.getAddress());
            orderEntity.setEmail(orderDto.getEmail());
            orderEntity.setPinCode(orderDto.getPinCode());
            orderEntity.setAvailableDate(orderDto.getAvailableDate());
            orderEntity.setAvailableTime(orderDto.getAvailableTime());
            orderEntity.setServiceProvider(serviceProvider);
            return orderRepository.save(orderEntity);
        }
        return null;
    }

    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    public Order updateOrder(Integer orderId, OrderDto updatedOrderDto) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            Order order = optionalOrder.get();
            order.setName(updatedOrderDto.getName());
            order.setPhone(updatedOrderDto.getPhone());
            order.setAddress(updatedOrderDto.getAddress());
            order.setEmail(updatedOrderDto.getEmail());
            order.setPinCode(updatedOrderDto.getPinCode());
            order.setAvailableDate(updatedOrderDto.getAvailableDate());
            order.setAvailableTime(updatedOrderDto.getAvailableTime());
            return orderRepository.save(order);
        } else {
            return null;
        }
    }

    public boolean deleteOrder(Integer orderId) {
        Optional<Order> optionalOrder = orderRepository.findById(orderId);
        if (optionalOrder.isPresent()) {
            orderRepository.deleteById(orderId);
            return true;
        } else {
            return false;
        }
    }
}
